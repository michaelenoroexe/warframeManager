version: '3'
networks:
  loki:
  production:

services:

##### PRODUCTION SECTION #####

  node:
    container_name: node
    build: .
    ports:
      - "80:80"
      # - "80:4200"    # FOR TESTING WITHOUT NGINX
      - "49153:49153"
    volumes:
      - .:/app:rw
      - "/app/node_modules"
      - ./logs/nginx/:/var/log/nginx/:z
    networks:
      - production
    logging:
      driver: "json-file"
      options: 
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes: 
      - ./logs/mongo/:/var/log/mongodb/
    #  - ./mongo_data:/data/db:rw
    networks:
      - production

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    networks:
      - production
    depends_on:
      - mongo

  backend:
    container_name: api
    build: ./WarframeManagerBack/
    ports:
      - "7132:80"
      #- "5132:80"
    networks:
      - production
##### END OF PRODUCTION SECTION #####


##### MONITORING #####
  loki:
    image: grafana/loki:master
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki
      - production

  promtail:
    image: grafana/promtail:master
    container_name: promtail
    volumes:
      - ./monitoring/promtail-conf.yml:/etc/promtail/docker-config.yaml
      - ./logs/nginx/:/var/log/nginx/:z
      - ./logs/mongo/:/var/log/mongodb/:z
      - /var/lib/docker/containers/:/var/host_system/docker/containers/
    command: -config.file=/etc/promtail/docker-config.yaml
    networks:
      - loki

  grafana:
    image: grafana/grafana:master
    container_name: grafana
    ports:
      - "550:3000"
    # command: -config=/usr/share/grafana/conf/provisioning/datasources/datasources.yml
    volumes:
      - ./monitoring/grafana_provisioning:/etc/grafana/provisioning
    networks:
      - loki

  cadvisor-exporter:
      container_name: "cadvisor"
      image: google/cadvisor
      ports:
        - "9200:8080"
      volumes:
        - "/var/run:/var/run:rw"
        - "/sys:/sys:ro"
        - /var/lib/docker/:/var/lib/docker:ro
      restart: unless-stopped
      networks:
        - loki

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus-conf.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - loki

##### END OF MONITORING #####

volumes:
  mongo_data:
  prometheus_data: